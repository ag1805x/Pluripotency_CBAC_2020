# Codes used in CBAC 2020 paper
# Paper title : RNA-Seq analysis reveals pluripotency-associated genes and their interaction networks in human embryonic stem cells
# DOI : https://doi.org/10.1016/j.compbiolchem.2020.107239


# Data download using Aspera 

$ ascp -QT -P33001 -k 1 -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh era-fasp@fasp.sra.ebi.ac.uk:/vol1/fastq/SRR308/003/SRR3084933/SRR3084933_1.fastq.gz <destination>

# Downloading Reference genome, GTF file, HISAT2 index file

# Quality control

$ fastqc SRR3084933_1.fastq.gz


# Trimming

## For paired end reads (DS1-4)
$ java -jar trimmomatic-0.36.jar PE -trimlog SRR3084933_trim.log SRR3084933_1.fastq.gz SRR3084933_2.fastq.gz -baseout SRR3084933_clean.gz ILLUMINACLIP:TruSeq3-PE-2.fa:2:30:10 TRAILING:24 MINLEN:85

## For single end reads (DS5)
$ java -jar trimmomatic-0.36.jar SE -trimlog SRR6368091_trim.log SRR6368091.fastq.gz SRR6368091_clean.gz ILLUMINACLIP:TruSeq3-SE-2.fa:2:30:10 TRAILING:24 MINLEN:80


# Read alignment

## For paired end reads (DS1-4)
$ hisat2 --dta --rna-strandness <FR|RF|none> -p 12 -x <path to index> -1 SRR3084933_clean_1P.gz -2 SRR3084933_clean_2P.gz -s SRR3084933.sam --un-gz SRR3084933_unaln.fastq.gz --summary-file SRR3084933_align_summary.txt --met-file SRR3084933_align_metric.tsv

	--rna-strandness ::
	 DS1 : not used as unstranded
	 DS2 : FR
	 DS3 : not used as unstranded
	 DS4 : RF

## For single end reads (DS5)
$ hisat2 --dta --rna-strandness <R|F|none> -p 12 -x <path to index> -U SRR6368091_clean.gz -s SRR6368091.sam --un-gz SRR6368091_unaln.fastq.gz --summary-file SRR6368091_align_summary.txt --met-file SRR6368091_align_metric.tsv

	--rna-strandness ::
	 DS5 : not used as unstranded

# Read assignment

> library(Rsubread)
> bam.list <- dir(path="<path to directory>", pattern=".bam$", recursive=TRUE, full.names=TRUE)
> fc <- featureCounts(bam.list, annot.ext=Homo_sapiens.GRCh38.84.gtf, isGTFAnnotationFile=T, allowMultiOverlap=F, isPairedEnd=T, nthreads=10, countMultiMappingReads=F, GTF.featureType='gene', strandSpecific=0|1|2)

	strandSpecific :: DS1 : 0; DS2 : 1; DS3 : 0; DS4 : 2; DS5 : 0



# Differential Gene Expression

## Load libraries
> library(edgeR)
> library(DESeq2)
> library(geneplotter)
> library(gplots)
> library(ggplot2)
> library(pheatmap)
> library(UpSetR)
> library(RColorBrewer)

## Read count table and extract counts for Protein coding genes
> counts = read.table("PRJNA307622_allCounts_noOver_noMulti.tsv", row.names=c(1), header=T)
> sprintf ("Total Genes")
> dim(counts)
> protein_coding = as.matrix(read.table("protein_coding.txt"))
> sprintf ("Total Protein Coding Genes")
> dim(protein_coding)
> counts_pc <- counts[protein_coding,]
> dim(counts_pc)

## Filtering out genes which donot have 1 cpm atleast in two samples
> keep <- rowSums(cpm(counts_pc)>1)>1
> counts_pc_filt <- counts_pc[keep, ]
> sprintf ("Number of genes after filtering low count genes")
> dim(counts_pc_filt)
> condition = c(rep("T",2), rep("C",2))
> coldata <- data.frame(row.names=colnames(counts_pc_filt), condition)
> sprintf ("Coldata")
> coldata

## DESEQ2 Analysis
> dds = DESeqDataSetFromMatrix(countData=counts_pc_filt, colData=coldata, design=~condition)
> dds = DESeq(dds)
> res = results(dds)
> sprintf ("DESeq2 results")
> dim(res)
> write.table(res, "DS1_DESeq_result.tsv", sep="\t", col.names=NA)
> res_clean = na.exclude(as.data.frame(res))
> sprintf ("Number of genes after NA exclude (DESeq)")
> dim(res_clean)
> upreg = res_clean[(res_clean$log2FoldChange>1 & res_clean$padj<0.01),]
> write.table(upreg, "DS1_DESeq_upreg.tsv", sep="\t", col.names=NA)
> sprintf ("Number of upregulated genes (DESeq2)")
> dim(upreg)
> downreg = res_clean[(res_clean$log2FoldChange<(-1) & res_clean$padj<0.01),]
> write.table(downreg, "DS1_DESeq_downreg.tsv", sep="\t", col.names=NA)
> sprintf ("Number of downregulated genes (DESeq2)")
> dim(downreg)

## Volcano Plot
> png(filename="DS1_volcano.png")
> with(res_clean, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano Plot", col="grey", xlim=c(-10,10)))
> with(subset(res_clean,padj<0.01 & log2FoldChange>1),points(log2FoldChange, -log10(padj), pch=20, col="green"))
> with(subset(res_clean,padj<0.01 & log2FoldChange<(-1)),points(log2FoldChange, -log10(padj), pch=20, col="red"))
> abline(h=2, lty=2)
> abline(v=-1, lty=2)
> abline(v=1, lty=2)
> dev.off()

## ECDF Plot
> png(filename="DS1_ecdf.png", height=1020, width=1020, units='px')
> multiecdf(counts(dds, normalized=TRUE)[,], xlab="MeanCounts", xlim=c(0,1000))
> dev.off()

## Plot Density
> png(filename="DS1_density.png", height=1020, width=1020, units='px')
> multidensity(counts(dds, normalized=TRUE)[,], xlab="MeanCounts", xlim=c(0,1000))
> dev.off()

## PLOT SAMPLE TO SAMPLE DISTANCE
> rld = rlogTransformation(dds, blind=T)
> png(filename="DS1_sample_heatmap1.png", height=1020, width=1020, units='px')
> distRL = dist(t(assay(rld)))
> mat=as.matrix(distRL)
> hmcol = colorRampPalette(brewer.pal(9,"GnBu"))(100)
> heatmap.2(mat, trace="none", col=rev(hmcol), margin=c(13,13))
> dev.off()
> png(filename="DS1_sample_heatmap2.png", height=1020, width=1020, units='px')
> pheatmap(mat, clustering_distance_rows=distRL, clustering_distance_cols=distRL, col=rev(hmcol))
> dev.off()

## PCA
> png(filename="DS1_pca1.png")
> pca = DESeq2::plotPCA(rld, intgroup=c("condition"), returnData=TRUE)
> p<-ggplot(pca,aes(x=PC1,y=PC2,color=group, label=row.names(pca) ))
> p<-p+geom_point()
> p
> dev.off()

> png(filename="DS1_pca2.png")
> plotPCA(rld, intgroup=c("condition"))
> dev.off()

## PLOT DISPERSION ESTIMATE
> png(filename="DS1_Dispersion.png", height=1020, width=1020, units='px')
> plotDispEsts(dds)
> dev.off()

## MA Plot
> png(filename="DS1_MA.png", height=1020, width=1020, units='px')
> plotMA(res)
> dev.off()

## Box-plot of Normalization
> png(filename="DS1_boxplot_normalized.png",width = 1500, height= 1020, units="px")
> colors = c(rep("green",2),rep("blue",2))
> boxplot(log2(counts(dds, normalized=TRUE)+1), col=colors, outline = FALSE, main="Box-plot of Normalized counts", xlab="Samples", ylab="log transformed normalized counts")
> legend("topright", inset=0, title="Sample type", c("Pluripotent","Non-pluripotent"), fill=c("green","blue"), cex=0.8)
> dev.off()

> png(filename="DS1_boxplot_unnormalized.png",width = 1500, height= 1020, units="px")
> boxplot(log2(counts_pc_filt+1), col=colors, outline = FALSE, main="Box-plot of Un-normalized counts", xlab="Samples", ylab="log transformed normalized counts")
> legend("topright", inset=0, title="Sample type", c("Pluripotent","Non-pluripotent"), fill=c("green","blue"), cex=0.8)
> dev.off()

> png(filename="DS1_boxplot_normalized_rld.png",width = 1500, height= 1020, units="px")
> colors = c(rep("green",2),rep("blue",2))
> boxplot(assay(rld), col=colors, outline = FALSE, main="Box-plot of Normalized counts", xlab="Samples", ylab="log transformed normalized counts")
> legend("topright", inset=0, title="Sample type", c("Pluripotent","Non-pluripotent"), fill=c("green","blue"), cex=0.8)
> dev.off()
> save (dds, file = 'DS1_dds.rda')

##  EDGER
> sample_info.edgeR <- factor(c(rep("T", 2), rep("C",2)))
> sample_info.edgeR <- relevel(sample_info.edgeR, ref="C")
> sprintf ("EdgeR sample info")
> sample_info.edgeR
> edgeR.DGElist <- DGEList(counts= counts_pc_filt, group=sample_info.edgeR)
> sprintf ("Genes for edgeR")
> dim(edgeR.DGElist$counts)
> edgeR.DGElist <- calcNormFactors(edgeR.DGElist, method="TMM")
> edgeR.DGElist$samples
> design <- model.matrix(~sample_info.edgeR)
> sprintf ("edgeR design")
> design
> edgeR.DGElist <- estimateDisp(edgeR.DGElist, design)
> edger_fit <- glmFit(edgeR.DGElist, design)
> edger_lrt <- glmLRT(edger_fit)
> DGE.results_edgeR <- topTags(edger_lrt, n=Inf, sort.by = "none", adjust.method = "BH")
> write.table(DGE.results_edgeR$table, "DS1_EdgeR_result.tsv", sep="\t", col.names=NA)
> edger.upreg = DGE.results_edgeR$table[(DGE.results_edgeR$table$logFC>1 & DGE.results_edgeR$table$FDR<0.01),]
> write.table(edger.upreg, "DS1_EdgeR_upreg.tsv", sep="\t", col.names=NA)
> sprintf ("Number of upregulated genes (edgeR)")
> dim(edger.upreg)
> edger.downreg = DGE.results_edgeR$table[(DGE.results_edgeR$table$logFC<(-1) & DGE.results_edgeR$table$FDR<0.01),]
> write.table(edger.downreg, "DS1_EdgeR_downreg.tsv", sep="\t", col.names=NA)
> sprintf ("Number of downregulated genes (edgeR)")
> dim(edger.downreg)
> save (edger_lrt, file = 'DS1_edgeLRT.rda')

##  limma
> rownames(design) <- colnames(edgeR.DGElist)
> voomTransformed <- voom(edgeR.DGElist, design, plot=FALSE)
> voom.fitted <- lmFit(voomTransformed, design = design)
> voom.fitted <- eBayes(voom.fitted)
> colnames(design)
> DGE.results_limma <- topTable(voom.fitted, coef="sample_info.edgeRT", number=Inf, adjust.method="BH", sort.by="none")
> write.table(DGE.results_limma, "DS1_limma_result.tsv", sep="\t", col.names=NA)
> limma.upreg = DGE.results_limma[(DGE.results_limma$logFC>1 & DGE.results_limma$adj.P.Val<0.01),]
> write.table(limma.upreg, "DS1_limma_upreg.tsv", sep="\t", col.names=NA)
> sprintf ("Number of upregulated genes (limma)")
> dim(limma.upreg)
> limma.downreg = DGE.results_limma[(DGE.results_limma$logFC<(-1) & DGE.results_limma$adj.P.Val<0.01),]
> write.table(limma.downreg, "DS1_limma_downreg.tsv", sep="\t", col.names=NA)
> sprintf ("Number of downregulated genes (limma)")
> dim(limma.downreg)
> save (voom.fitted, file = 'DS1_VoomFitted.rda')


## Ccomparision of upregulated and downregulated genes from three different tools
> upreg_list <- list(DESeq2 = rownames(upreg), edgeR = rownames(edger.upreg), limma = rownames(limma.upreg))
> upreg_gns <- UpSetR::fromList(upreg_list)
> png(filename="DS1_upreg_comparision.png", height=720, width=720, units='px')
> UpSetR::upset(upreg_gns, order.by="freq", text.scale = 2)
> dev.off()
> downreg_list <- list(DESeq2.downreg =rownames(downreg), limma.downreg=rownames(limma.downreg), edger.downreg=rownames(edger.downreg))
> downreg_gns = fromList(downreg_list)
> png(filename="DS1_downreg_comparision.png", height=720, width=720, units='px')
> upset(downreg_gns, order.by="freq", text.scale = 2)
> dev.off()


# Coexpression network reconstruction of the common upregulated genes detected by the three tools

## Load libraries
> library(DESeq2)
> library(psych)
> library(igraph)

## Load DESeq2 analysis data to extract normalised counts
> load("/home/bioinfo/Documents/Work/Data/Work5/Dataset1/DS1_dds.rda")
> NormData = counts(dds, normalized=TRUE)
> sprintf ("Total DESeq2 genes:")
> dim(NormData)
> NormData.log = log2(NormData+1)
> dim(NormData.log)

## Extract log transformed normalised counts for the common genes
> upreg_common <- as.matrix(read.csv("/home/bioinfo/Documents/Work/Data/Work5/Dataset1/DS1_upreg_common.csv", header=F))
> sprintf ("Common upreg genes:")
> dim(upreg_common)
> Norm.interest = NormData.log[upreg_common,]

## Calucated pairwise gene correlation coefficients
> Norm.interest.corr = corr.test(t(Norm.interest), method="pearson", adjust="BH", ci=F)
> Norm.interest.corr$p[lower.tri(Norm.interest.corr$p, diag=TRUE)]=NA
> Pval.adj = as.data.frame(as.table(Norm.interest.corr$p))
> Norm.interest.corr$r[lower.tri(Norm.interest.corr$r, diag=TRUE)]=NA
> correlation = as.data.frame(as.table(Norm.interest.corr$r))
> cor.table = na.exclude(cbind(correlation, Pval.adj))[,c(1,2,3,6)]
> colnames(cor.table) = c("gene1", "gene2", "cor", "p.adj")
> sprintf ("Valid number of correlations:")
> dim(cor.table)
> cor.table.filt = cor.table[(abs(cor.table[,3])>0.9 & cor.table[,4]<0.05),]
> sprintf ("Number of correlations > 0.9 & p.adj<0.05:")
> dim(cor.table.filt)
> write.table(cor.table.filt, "DS1_CorrNet.txt", sep="\t", row.names=F, quote=F) 

